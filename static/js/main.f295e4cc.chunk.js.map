{"version":3,"sources":["Showcase.tsx","BasePoints.ts","Math.ts","Plot.ts","BezierCurve.ts","BezierCurveShowcase.tsx","BSpline.ts","BSplineShowcase.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Showcase","createRef","scope","setupIsComplete","componentDidMount","setup","componentDidUpdate","renderChildren","render","className","ref","onContextMenu","e","preventDefault","this","current","paper","PaperScope","React","Component","BasePoints","basePoints","EventTarget","removeChildren","addChildren","map","point","pointIndex","circle","Path","Circle","fillColor","Color","onMouseDrag","event","stop","points","currPoint","currIndex","clone","add","delta","onClick","button","customEvent","Event","index","dispatchEvent","filter","oldCursor","onMouseEnter","element","project","view","style","cursor","onMouseLeave","addEventListener","removeEventListener","value","length","Group","factorial","n","Error","product","i","Plot","minX","maxX","stepSize","funcs","config","coordinateSystem","addChild","Line","Point","xScaleStepSize","Array","fill","_","x","strokeColor","colors","randomColor","count","seed","hexString","forEach","func","funcIndex","Math","floor","p","isNaN","y","graph","closed","strokeWidth","BernsteinPoly","t","binomialResult","k","binomial","BezierCurve","drawCurve","removeSegments","sum","multiply","bezierCurve","remove","plotBernsteinCurves","functions","degree","sumOfAllNs","reduce","plot","abs","scale","translate","newBasePoints","BezierCurveShowcase","state","shouldAddPointOnClick","setState","target","checked","type","onChange","N","r","u","u_i","setTo0IfNecessary","Infinity","firstCoefficient","secondCoefficient","firstPart","secondPart","result","BSplinePoint","basePoint","BSpline","minU","min","usableUValues","maxU","max","all","slice","unusable","path","baseVectorPoints","group","text","PointText","content","closePath","deletedIndex","redraw","undefined","newValues","newDegree","newPoint","createEquidistantVector","numberOfPoints","BSplineShowcase","baseVector","addPoint","parseInt","currVectorLength","expectedLength","parsed","Number","newBaseVector","currValue","uValues","activeLayer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f295e4cc.chunk.js","sourcesContent":["import React, { createRef } from 'react'\nimport paper from 'paper'\n\ntype ShowcaseProps = {}\ntype ShowcaseState = {}\n\nexport abstract class Showcase<Props, State> extends React.Component<\n  Props & ShowcaseProps,\n  State & ShowcaseState\n> {\n  #ref = createRef<HTMLCanvasElement>()\n  protected scope: paper.PaperScope | undefined\n  protected setupIsComplete = false\n\n  componentDidMount = () => {\n    this.setup()\n  }\n\n  componentDidUpdate = () => {\n    this.setup()\n  }\n\n  protected setup() {\n    if (!this.setupIsComplete && this.#ref.current) {\n      this.scope = new paper.PaperScope()\n      this.scope.setup(this.#ref.current)\n      this.setupIsComplete = true\n    }\n  }\n\n  protected renderChildren = (): React.ReactNode => null\n\n  render = () => (\n    <div className={'showcase'}>\n      {this.renderChildren()}\n      <canvas ref={this.#ref} onContextMenu={(e) => e.preventDefault()} />\n    </div>\n  )\n}\n","import paper from 'paper'\n\nexport class BasePoints extends paper.Group {\n  #basePoints: Array<paper.Point>\n  #eventEmitter = new EventTarget()\n\n  constructor(basePoints: Array<paper.Point>) {\n    super()\n    this.#basePoints = basePoints.map((point) => point.clone())\n    this.#update()\n  }\n\n  #update = () => {\n    this.removeChildren()\n\n    this.addChildren(\n      this.#basePoints.map((point, pointIndex) => {\n        const circle = new paper.Path.Circle(point, 5)\n        circle.fillColor = new paper.Color('red')\n        circle.onMouseDrag = (event: paper.MouseEvent) => {\n          event.stop()\n          this.points = this.#basePoints.map((currPoint, currIndex) =>\n            currIndex === pointIndex\n              ? currPoint.clone().add(event.delta)\n              : currPoint,\n          )\n        }\n\n        circle.onClick = (event: paper.MouseEvent & { event: MouseEvent }) => {\n          if (event.event.button === 2) {\n            event.stop()\n\n            const customEvent: Event & { index?: number } = new Event(\n              'removePoint',\n            )\n            customEvent.index = pointIndex\n            this.#eventEmitter.dispatchEvent(customEvent)\n\n            this.points = this.#basePoints.filter(\n              (currPoint, currIndex) => currIndex !== pointIndex,\n            )\n          }\n        }\n\n        let oldCursor: string = 'default'\n        circle.onMouseEnter = () => {\n          const element = circle.project.view?.element\n          if (element) {\n            oldCursor = element.style.cursor\n            element.style.cursor = 'pointer'\n          }\n        }\n        circle.onMouseLeave = () => {\n          const element = circle.project.view?.element\n          if (element) {\n            element.style.cursor = oldCursor\n          }\n        }\n\n        return circle\n      }),\n    )\n  }\n\n  public addEventListener(\n    ...params: Parameters<InstanceType<typeof EventTarget>['addEventListener']>\n  ) {\n    this.#eventEmitter.addEventListener(...params)\n  }\n\n  public removeEventListener(\n    ...params: Parameters<\n      InstanceType<typeof EventTarget>['removeEventListener']\n    >\n  ) {\n    this.#eventEmitter.removeEventListener(...params)\n  }\n\n  get points(): Array<paper.Point> {\n    return this.#basePoints\n  }\n\n  set points(value: Array<paper.Point>) {\n    this.#basePoints = value.map((point) => point.clone())\n    this.#update()\n    this.#eventEmitter.dispatchEvent(new Event('update'))\n  }\n\n  get length() {\n    return this.points.length\n  }\n}\n","export const factorial = (n: number): number => {\n  if (n < 0 || n % 1 !== 0) {\n    throw new Error(`Invalid value n = ${n} for computing n!`)\n  } else {\n    let product = 1\n\n    for (let i = 1; i <= n; i++) {\n      product *= i\n    }\n\n    return product\n  }\n}\n\nexport const binomial = (n: number, k: number): number =>\n  factorial(n) / (factorial(k) * factorial(n - k))\n","import paper from 'paper'\nimport randomColor from 'randomcolor'\n\ntype Config = {\n  xScaleStepSize?: number\n}\n\nexport class Plot extends paper.Group {\n  #minX: number\n  #maxX: number\n  #stepSize: number\n  #config?: Config\n  #funcs: Array<(x: number) => number>\n\n  constructor(\n    minX: number,\n    maxX: number,\n    stepSize: number,\n    funcs: Array<(x: number) => number>,\n    config?: Config,\n  ) {\n    super()\n    this.#minX = minX\n    this.#maxX = maxX\n    this.#stepSize = stepSize\n    this.#funcs = funcs\n    this.#config = config\n\n    this.#draw()\n  }\n\n  #draw = () => {\n    this.removeChildren()\n    this.#drawGraphs()\n    this.#drawCoordinateSystem()\n  }\n\n  #drawCoordinateSystem = () => {\n    const coordinateSystem = new paper.Group()\n    coordinateSystem.addChild(\n      new paper.Path.Line(\n        new paper.Point(0, 0),\n        new paper.Point(this.#maxX, 0),\n      ),\n    )\n    coordinateSystem.addChild(\n      new paper.Path.Line(new paper.Point(0, -0.1), new paper.Point(0, 1.1)),\n    )\n\n    const stepSize = this.#config?.xScaleStepSize ?? 1\n    coordinateSystem.addChildren(\n      Array(this.#maxX / stepSize + 1)\n        .fill(1)\n        .map((_, index) => {\n          const x = this.#minX + stepSize * index\n          return new paper.Path.Line(\n            new paper.Point(x, -0.1),\n            new paper.Point(x, 0.1),\n          )\n        }),\n    )\n\n    coordinateSystem.strokeColor = new paper.Color('grey')\n    this.addChild(coordinateSystem)\n  }\n\n  #drawGraphs = () => {\n    const colors = randomColor({\n      count: this.#funcs.length,\n      seed: 'abcd',\n    }).map((hexString) => new paper.Color(hexString))\n\n    this.#funcs.forEach((func, funcIndex) => {\n      const xValues = Array(\n        Math.floor((this.#maxX - this.#minX) / this.#stepSize) + 1,\n      )\n        .fill(1)\n        .map((_, index) => this.#minX + index * this.#stepSize)\n\n      const points = xValues\n        .map((x) => new paper.Point(x, func(x)))\n        .filter((p) => !isNaN(p.x) && !isNaN(p.y))\n\n      const graph = new paper.Path(points)\n      graph.closed = false\n      graph.strokeColor = colors[funcIndex]\n      graph.strokeWidth = 2\n\n      this.addChild(graph)\n    })\n  }\n}\n","import paper from 'paper'\nimport { binomial } from './Math'\nimport { BasePoints } from './BasePoints'\nimport { Plot } from './Plot'\n\nconst BernsteinPoly = (n: number, i: number, t: number): number => {\n  let binomialResult: number\n\n  try {\n    binomialResult = binomial(n, i)\n  } catch (e) {\n    binomialResult = 0\n  }\n\n  return binomialResult * t ** i * (1 - t) ** (n - i)\n}\n\nconst bezierCurve = (t: number, basePoints: Array<paper.Point>) => {\n  let sum = new paper.Point(0, 0)\n  const n = basePoints.length - 1\n\n  for (let i = 0; i <= n; i++) {\n    sum = sum.add(basePoints[i].clone().multiply(BernsteinPoly(n, i, t)))\n  }\n\n  return sum\n}\n\ntype Config = { plotBernsteinCurves?: boolean }\n\nexport class BezierCurve extends paper.Group {\n  #basePoints: BasePoints | Array<paper.Point>\n  #curvePath = new paper.Path()\n  #basePointVisualisation = new paper.Group()\n  #config: Config = {}\n  #plot?: Plot\n\n  constructor(basePoints: BasePoints | Array<paper.Point>, config?: Config) {\n    super()\n    this.#basePoints = basePoints\n    this.addChild(this.#curvePath)\n    this.addChild(this.#basePointVisualisation)\n    if (config) {\n      this.#config = config\n    }\n\n    if (basePoints instanceof BasePoints) {\n      basePoints.addEventListener('update', this.drawCurve)\n    }\n\n    this.drawCurve()\n  }\n\n  private drawCurve = () => {\n    this.#curvePath.removeSegments()\n    this.#curvePath.strokeColor = new paper.Color('black')\n\n    const [...curvePoints] = Array(50 + 1)\n      .fill(1)\n      .map((_, index) => index / 50)\n      .map((t) => bezierCurve(t, this.basePoints))\n    curvePoints.forEach((point) => this.#curvePath.add(point))\n\n    this.#plotBernsteinCurves()\n  }\n\n  #plotBernsteinCurves = () => {\n    this.#plot?.remove()\n\n    if (this.#config.plotBernsteinCurves) {\n      const functions = this.basePoints.map((_, index) => (x: number) =>\n        BernsteinPoly(this.degree, index, x),\n      )\n      const sumOfAllNs = (x: number) =>\n        functions.reduce((sum, func) => sum + func(x), 0)\n\n      const plot = new Plot(\n        0,\n        1,\n        0.05,\n        [\n          sumOfAllNs,\n          (x) => {\n            return Math.abs(1 - sumOfAllNs(x)) <= 0.001 ? 1 : 0\n          },\n          ...functions,\n        ],\n        { xScaleStepSize: 0.1 },\n      )\n      plot.scale(500, 150)\n      plot.scale(1, -1)\n      plot.translate(new paper.Point(1000, 100))\n      this.addChild(plot)\n      this.#plot = plot\n    }\n  }\n\n  get degree(): number {\n    return this.basePoints.length - 1\n  }\n\n  set basePoints(newBasePoints: Array<paper.Point>) {\n    if (this.#basePoints instanceof BasePoints) {\n      this.#basePoints.points = newBasePoints\n    } else {\n      this.#basePoints = newBasePoints\n      this.drawCurve()\n    }\n  }\n\n  get basePoints(): Array<paper.Point> {\n    return this.#basePoints instanceof BasePoints\n      ? this.#basePoints.points\n      : this.#basePoints\n  }\n}\n","import React from 'react'\nimport { Showcase } from './Showcase'\nimport { BasePoints } from './BasePoints'\nimport paper from 'paper'\nimport { BezierCurve } from './BezierCurve'\n\ntype Props = {}\ntype State = {\n  shouldAddPointOnClick: boolean\n}\n\nexport class BezierCurveShowcase extends Showcase<Props, State> {\n  #basePoints: BasePoints | undefined\n  #curve: BezierCurve | undefined\n\n  state = {\n    shouldAddPointOnClick: false,\n  }\n\n  setup() {\n    if (!this.setupIsComplete) {\n      super.setup()\n      this.scope!.view.onClick = this.#onCanvasClick\n      this.#basePoints = new BasePoints([\n        new this.scope!.Point(200, 200),\n        new this.scope!.Point(100, 100),\n        new this.scope!.Point(300, 100),\n        new this.scope!.Point(400, 200),\n      ])\n      this.#curve = new BezierCurve(this.#basePoints, {\n        plotBernsteinCurves: true,\n      })\n    }\n  }\n\n  #onCanvasClick = (event: paper.MouseEvent & { event: MouseEvent }) => {\n    if (\n      this.state.shouldAddPointOnClick &&\n      this.#basePoints &&\n      event.event.button === 0\n    ) {\n      this.#basePoints.points = [...this.#basePoints.points, event.point]\n    }\n  }\n\n  #onChangeAddPointOnClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ shouldAddPointOnClick: event.target.checked })\n  }\n\n  renderChildren = () => {\n    return (\n      <>\n        <h2>Bézier Curves</h2>\n        <label>\n          <input\n            type={'checkbox'}\n            checked={this.state.shouldAddPointOnClick}\n            onChange={this.#onChangeAddPointOnClick}\n          />\n          Add point on checked\n        </label>\n      </>\n    )\n  }\n}\n","import paper from 'paper'\nimport { BasePoints } from './BasePoints'\nimport { Plot } from './Plot'\n\nexport const N = (i: number, r: number, u: number, u_i: number[]): number => {\n  const setTo0IfNecessary = (n: number) =>\n    isNaN(n) || Math.abs(n) === Infinity ? 0 : n\n\n  if (!(u_i[i] <= u && u < u_i[i + r + 1])) {\n    return 0\n  } else if (r === 0) {\n    return u_i[i] <= u && u < u_i[i + 1] ? 1 : 0\n  } else {\n    const firstCoefficient = (u - u_i[i]) / (u_i[i + r] - u_i[i])\n    const secondCoefficient =\n      (u_i[i + r + 1] - u) / (u_i[i + r + 1] - u_i[i + 1])\n    const firstPart = N(i, r - 1, u, u_i)\n    const secondPart = N(i + 1, r - 1, u, u_i)\n    let result =\n      setTo0IfNecessary(firstCoefficient) * firstPart +\n      setTo0IfNecessary(secondCoefficient) * secondPart\n\n    return setTo0IfNecessary(result)\n  }\n}\n\nconst BSplinePoint = (\n  u: number,\n  degree: number,\n  u_i: number[],\n  basePoints: Array<paper.Point>,\n) => {\n  const result = basePoints.reduce(\n    (sum, basePoint, index) =>\n      sum.add(basePoint.clone().multiply(N(index, degree, u, u_i))),\n    new paper.Point(0, 0),\n  )\n\n  // console.log(result.toString(), u)\n\n  return result\n}\n\nexport class BSpline extends paper.Group {\n  #degree: number\n  #u_i: number[]\n  #basePoints: BasePoints\n  #curvePath = new paper.Path()\n\n  constructor(degree: number, u_i: number[], basePoints: BasePoints) {\n    super()\n    this.#degree = degree\n    this.#u_i = u_i\n    this.#basePoints = basePoints\n\n    if (this.#basePoints.length < degree + 1) {\n      throw new Error(`too little points`)\n    }\n\n    if (this.#u_i.length !== this.#basePoints.length + this.#degree + 1) {\n      throw new Error(\n        `Wrong amount of u_i; expected ${\n          this.#basePoints.length + this.#degree + 1\n        } but got ${this.#u_i.length}`,\n      )\n    }\n\n    this.#basePoints.addEventListener('update', this.#drawCurve)\n    this.#basePoints.addEventListener('removePoint', ((e: {\n      index?: number\n    }) => {\n      if (e.index !== undefined) {\n        this.#onPointWasRemoved(e.index)\n      }\n    }) as any)\n\n    this.#drawCurve()\n  }\n\n  #drawPlot = () => {\n    const functions = this.#u_i.map((_, index) => (x: number) =>\n      N(index, this.#degree, x, this.#u_i),\n    )\n    const sumOfAllNs = (x: number) =>\n      functions.reduce((sum, func) => sum + func(x), 0)\n    const plot = new Plot(this.#u_i[0], this.#u_i[this.#u_i.length - 1], 0.05, [\n      sumOfAllNs,\n      (x) => {\n        return Math.abs(1 - sumOfAllNs(x)) <= 0.001 ? 1 : 0\n      },\n      ...functions,\n    ])\n    plot.scale(60)\n    plot.scale(1, -1)\n    plot.translate(new paper.Point(1000, 100))\n    this.addChild(plot)\n  }\n\n  get usableUValues() {\n    return this.#u_i.slice(this.#degree, -this.#degree)\n  }\n\n  #drawCurve = () => {\n    this.removeChildren()\n\n    this.#drawPlot()\n    this.#drawGuidancePoints()\n    // this.#drawGuidanceLines()\n    this.#drawCurvesToOrigin()\n\n    this.#curvePath.strokeColor = new paper.Color('black')\n    this.#curvePath.removeSegments()\n\n    const minU = Math.min(...this.usableUValues)\n    const maxU = Math.max(...this.usableUValues)\n    const uValues = Array(100)\n      .fill(1)\n      .map((_, index, all) => minU + ((maxU - minU) * index) / all.length)\n\n    const points = uValues.map((u) =>\n      BSplinePoint(u, this.#degree, this.#u_i, this.#basePoints.points),\n    )\n    points.forEach((point) => this.#curvePath.add(point))\n    this.addChild(this.#curvePath)\n  }\n\n  #drawCurvesToOrigin = () => {\n    const unusableUValues = [\n      this.u_i.slice(0, this.#degree + 1),\n      [...this.u_i.slice(this.u_i.length - this.degree - 1, this.u_i.length)],\n    ]\n\n    unusableUValues.forEach((unusable) => {\n      const path = new paper.Path()\n      path.strokeColor = new paper.Color('rgba(0, 0, 0, 0.3)')\n\n      const minU = Math.min(...unusable)\n      const maxU = Math.max(...unusable)\n      const uValues = Array(100)\n        .fill(1)\n        .map((_, index, all) => minU + ((maxU - minU) * index) / all.length)\n\n      const points = uValues.map((u) =>\n        BSplinePoint(u, this.#degree, this.#u_i, this.#basePoints.points),\n      )\n      points.forEach((point) => path.add(point))\n\n      this.addChild(path)\n    })\n  }\n\n  #drawGuidancePoints = () => {\n    const baseVectorPoints = this.#u_i.map((u) =>\n      BSplinePoint(u, this.#degree, this.#u_i, this.#basePoints.points),\n    )\n\n    this.addChildren(\n      baseVectorPoints.map((point, index) => {\n        const group = new paper.Group()\n\n        const circle = new paper.Path.Circle(point, 3)\n        circle.fillColor = new paper.Color('green')\n\n        const text = new paper.PointText(point)\n        text.content = `u${index}; t = ${this.#u_i[index]}`\n\n        group.addChild(circle)\n        group.addChild(text)\n        return group\n      }),\n    )\n  }\n\n  #drawGuidanceLines = () => {\n    const path = new paper.Path()\n    path.add(new paper.Point(0, 0))\n    path.strokeColor = new paper.Color('rgba(0, 0, 0, 0.3)')\n\n    // Add base vector points for poly from (0, 0) to first base point\n    this.u_i\n      .slice(0, this.degree)\n      .forEach((point) =>\n        path.add(\n          BSplinePoint(point, this.degree, this.u_i, this.#basePoints.points),\n        ),\n      )\n\n    // add base points interlaced with guidance points\n    this.#basePoints.points.forEach((point, index) => {\n      path.add(point)\n      path.add(\n        BSplinePoint(\n          this.u_i[this.degree + index],\n          this.degree,\n          this.u_i,\n          this.#basePoints.points,\n        ),\n      )\n    })\n\n    path.closePath()\n    this.addChild(path)\n  }\n\n  public redraw() {\n    this.#drawCurve()\n  }\n\n  get u_i() {\n    return this.#u_i\n  }\n\n  set u_i(newValues) {\n    this.#u_i = newValues\n  }\n\n  get degree() {\n    return this.#degree\n  }\n\n  set degree(newDegree) {\n    this.#degree = newDegree\n  }\n\n  public addPoint(newPoint: paper.Point) {\n    this.#u_i = [...this.u_i, Math.max(...this.u_i) + 1]\n    this.#basePoints.points = [...this.#basePoints.points, newPoint]\n  }\n\n  #onPointWasRemoved = (deletedIndex: number) => {\n    this.#u_i = this.u_i.filter((_, currIndex) => currIndex !== deletedIndex)\n    this.redraw()\n  }\n}\n\nexport const createEquidistantVector = (\n  degree: number,\n  numberOfPoints: number,\n) =>\n  Array(degree + numberOfPoints + 1)\n    .fill(1)\n    .map((_, index) => index)\n","import React from 'react'\nimport { Showcase } from './Showcase'\nimport { BasePoints } from './BasePoints'\nimport paper from 'paper'\nimport { BSpline, createEquidistantVector } from './BSpline'\nimport './BSplineShowcase.scss'\n\ntype State = {\n  shouldAddPointOnClick: boolean\n  degree: number\n  baseVector: number[]\n}\ntype Props = {}\n\nexport class BSplineShowcase extends Showcase<Props, State> {\n  #basePoints: BasePoints | undefined\n  #bSpline: BSpline | undefined\n\n  state = {\n    shouldAddPointOnClick: false,\n    degree: 2,\n    // # base points + degree + 1 equidistant values\n    baseVector: createEquidistantVector(2, 5),\n  }\n\n  setup() {\n    if (!this.setupIsComplete) {\n      super.setup()\n      this.scope!.view.onClick = this.#onCanvasClick\n      this.#basePoints = new BasePoints([\n        new this.scope!.Point(100, 100),\n        new this.scope!.Point(200, 200),\n        new this.scope!.Point(300, 100),\n        new this.scope!.Point(400, 200),\n        new this.scope!.Point(500, 100),\n      ])\n\n      this.#basePoints.addEventListener('update', () => {\n        this.setState({\n          baseVector: this.#bSpline?.u_i ?? this.state.baseVector,\n        })\n      })\n\n      const degree = 2\n      const uValues = createEquidistantVector(degree, this.#basePoints.length)\n\n      this.#bSpline = new BSpline(degree, uValues, this.#basePoints)\n      this.scope!.project.activeLayer.addChild(this.#bSpline)\n    }\n  }\n\n  #onCanvasClick = (event: paper.MouseEvent & { event: MouseEvent }) => {\n    if (this.state.shouldAddPointOnClick && event.event.button === 0) {\n      this.#bSpline?.addPoint(event.point)\n    }\n  }\n\n  #onChangeAddPointOnClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ shouldAddPointOnClick: event.target.checked })\n  }\n\n  #onChangeDegree = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newDegree = Math.max(1, parseInt(event.target.value))\n\n    if (this.#bSpline && this.#basePoints) {\n      this.#bSpline.degree = newDegree\n\n      const currVectorLength = this.#bSpline.u_i.length\n      const expectedLength =\n        this.#basePoints.points.length + this.#bSpline.degree + 1\n\n      if (currVectorLength < expectedLength) {\n        this.#bSpline.u_i = this.#bSpline.u_i.slice(0, expectedLength)\n      }\n\n      this.#bSpline.redraw()\n\n      this.setState({\n        degree: this.#bSpline.degree,\n        baseVector: this.#bSpline.u_i,\n      })\n    }\n  }\n\n  #onChangeBaseVectorValue = (\n    index: number,\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const parsed = parseInt(event.target.value)\n\n    if (this.#bSpline && !Number.isNaN(parsed)) {\n      const newBaseVector = this.#bSpline.u_i.map((currValue, currIndex) =>\n        currIndex === index ? parsed : currValue,\n      )\n      this.#bSpline.u_i = newBaseVector\n      this.#bSpline.redraw()\n\n      this.setState({ baseVector: newBaseVector })\n    }\n  }\n\n  renderChildren = () => {\n    return (\n      <div className={'controls'}>\n        <h2>B-Splines</h2>\n        <p>\n          Left-clicks create new points; right-clicks remove them. The graph to\n          the right shows the \"influence polynomials\" with two exceptions: the\n          large pink curve is the sum of all influences and the blue curve with\n          (hopefully two) vertical lines shows where the sum is 1 (i.e. where\n          the spline is defined).\n        </p>\n        {/* Just taking up the grid slot */}\n        <div />\n        <label>\n          <input\n            type={'checkbox'}\n            checked={this.state.shouldAddPointOnClick}\n            onChange={this.#onChangeAddPointOnClick}\n          />\n          <div>Add point on click inside canvas</div>\n        </label>\n        <label>\n          <input\n            type={'number'}\n            value={this.state.degree}\n            onChange={this.#onChangeDegree}\n          />\n          <div>Degree of polynomials</div>\n        </label>\n        <div className=\"filler\" />\n        {this.state.baseVector.map((value, index, all) => {\n          return (\n            <label className={'base-vector-input'} key={index}>\n              <span>\n                u<sub>{index}</sub> =&nbsp;\n              </span>\n              <input\n                type={'number'}\n                value={value}\n                min={all[index - 1]}\n                max={all[index + 1]}\n                onChange={(event) =>\n                  this.#onChangeBaseVectorValue(index, event)\n                }\n              />\n            </label>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport { BezierCurveShowcase } from './BezierCurveShowcase'\nimport { BSplineShowcase } from './BSplineShowcase'\n\nconst App = () => (\n  <div className=\"App\">\n    <BezierCurveShowcase />\n    <BSplineShowcase />\n  </div>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}